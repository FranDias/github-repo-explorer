{"version":3,"sources":["components/Select.js","components/SearchOwner.js","components/SortOrderButton.js","components/LayoutBase.js","components/RepoDisplay/RepoCell.js","components/commits/CommitsGetter.js","components/RepoDisplay/RepoRow.js","components/RepoDisplay/RepoTable.js","App.js","serviceWorker.js","index.js"],"names":["Select","_ref","name","onChange","options","react_default","a","createElement","map","choice","key","value","defaultProps","SearchOwner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","debounce","cancel","_this2","placeholder","type","e","nativeEvent","target","Component","SortOrderButton","sortDirection","onClick","arrowDirectionContent","ropTypes","PropTypes","oneOf","undefined","func","isRequired","LayoutBase","header","children","className","RepoCell","label","url","text","expands","concat","textContent","href","renderText","epxands","CommitsGetter","state","isLoaded","commits","lastRequest","fetchCommits","bind","assertThisInitialized","commits_url","URL","split","_this$state","length","Date","now","fixCommits_url","shouldFetchNewCommits","fetch","then","data","json","setState","sha","author","commit","html_url","avatar_url","login","src","alt","message","PureComponent","RepoRow","expanded","asked","repo","_this$props$repo","chosenAttributes","description","stargazers_count","forks_count","open_issues_count","open_issues_url","values","RepoDisplay_RepoCell","renderChosenAttributes","renderExpandButton","commits_CommitsGetter","RepoTable","repoError","repos","sortBy","Fragment","sort","b","RepoDisplay_RepoRow","ownerChoices","sortOptions","App","owner","selectOnChange","selectSortCount","reverseSort","handleInputChange","catch","newFetch","srcElement","selectedIndex","components_SearchOwner","components_Select","components_SortOrderButton","_this$state2","components_LayoutBase","renderSearchControls","RepoDisplay_RepoTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4822f97e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Select = ({ name, onChange, options }) => (\n  <select {...{ onChange, name }}>\n    {options.map(choice => (\n      <option key={choice} value={choice}>\n        Sort by {choice}\n      </option>\n    ))}\n  </select>\n);\n\nSelect.propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nSelect.defaultProps = {\n  name: \"default\",\n  onChange: () => {},\n  options: [\"no options provied\"]\n};\n\nexport default Select;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport debounce from \"lodash/debounce\";\n\nclass SearchOwner extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = debounce(this.props.onChange, 300);\n  }\n\n  static defaultProps = {\n    placeholder:\n      \"Search an organization's repositories, now dispaying HubSpot:\",\n    onChange: () => {}\n  };\n\n  static propTypes = {\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n  };\n\n  componentWillUnmount() {\n    this.onChange.cancel();\n  }\n\n  render() {\n    const { placeholder } = this.props;\n\n    return (\n      <input\n        {...{\n          type: \"text\",\n          placeholder,\n          onChange: e => this.onChange(e.nativeEvent.target.value)\n        }}\n      />\n    );\n  }\n}\n\nexport default SearchOwner;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst arrowDirectionContent = sortDirection => {\n  if (!sortDirection) return \"•\";\n  return sortDirection === 1 ? \"⬆\" : \"⬇\";\n};\n\nconst SortOrderButton = ({ sortDirection, onClick }) => (\n  <button onClick={onClick}>{arrowDirectionContent(sortDirection)}</button>\n);\n\nSortOrderButton.ropTypes = {\n  sortDirection: PropTypes.oneOf([undefined, 1, -1]),\n  onClick: PropTypes.func.isRequired\n};\n\nSortOrderButton.defaultProps = {\n  sortDirection: undefined\n};\n\nexport default SortOrderButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LayoutBase = ({ header, children }) => {\n  return (\n    <div className=\"layout-base\">\n      {header && <header>{header}</header>}\n      {children && <div className=\"body\">{children}</div>}\n    </div>\n  );\n};\n\nLayoutBase.propTypes = {\n  header: PropTypes.node,\n  children: PropTypes.node\n};\n\nexport default LayoutBase;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./../../css/RepoCell.css\";\n\nconst RepoCell = ({ label, url, text, expands }) => {\n  const renderText = () => {\n    if (!text) {\n      return null;\n    }\n    let textContent = text;\n    if (url) {\n      textContent = <a href={url}>{textContent}</a>;\n    }\n    return <div>{textContent}</div>;\n  };\n\n  const getClassNames = () => {\n    const expandClass = expands ? \"flex-grow-1\" : \"\";\n    return `repo-cell ${expandClass}`;\n  };\n\n  return (\n    <div className={getClassNames()}>\n      <div className=\"label\">{label}</div>\n      {renderText()}\n    </div>\n  );\n};\n\nRepoCell.propTypes = {\n  label: PropTypes.string,\n  url: PropTypes.string,\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  expands: PropTypes.bool\n};\n\nRepoCell.defaultProps = {\n  epxands: false,\n  text: \"none\"\n};\n\nexport default RepoCell;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./../../css/Commits.css\";\n\nclass CommitsGetter extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      commits: [],\n      lastRequest: undefined\n    };\n\n    this.fetchCommits = this.fetchCommits.bind(this);\n  }\n\n  static propTypes = {\n    commits_url: PropTypes.string.isRequired\n  };\n\n  componentWillMount() {\n    this.fetchCommits(this.props.commits_url);\n  }\n\n  fixCommits_url(URL) {\n    return URL.split(\"{\")[0];\n  }\n\n  shouldFetchNewCommits() {\n    const { lastRequest, commits } = this.state;\n    if (\n      !lastRequest ||\n      commits.length < 1 ||\n      Date.now() - lastRequest > 60 * 1000 // Which is just different debounce…\n    )\n      return true;\n    return false;\n  }\n\n  fetchCommits(commits_url) {\n    commits_url = this.fixCommits_url(commits_url);\n    if (!this.shouldFetchNewCommits()) {\n      return null;\n    }\n\n    fetch(commits_url)\n      .then(data => data.json())\n      .then(json => this.setState({ commits: json, lastRequest: Date.now() }));\n  }\n\n  render() {\n    const { commits } = this.state;\n    if (commits.length < 1) return <span>loading</span>;\n    return (\n      <div className=\"commits\">\n        {/* this would have the same pattern as RepoTable & RepoRow but I'm running up against the clock */}\n        {commits &&\n          commits.map(({ sha, author, commit, html_url }) => {\n            if (!author) {\n              return null;\n            }\n            const { avatar_url, login } = author;\n            return (\n              <div key={sha} className=\"display-flex flex-direction-row commit\">\n                <img\n                  className=\"commit-author\"\n                  src={avatar_url}\n                  alt=\"commit author\"\n                />\n                <div className=\"display-flex flex-direction-column\">\n                  <a href={author.html_url}>{login}</a>\n                  <span>{commit.message}</span>\n                  <a href={html_url}>Go</a>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    );\n  }\n}\nexport default CommitsGetter;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport RepoCell from \"./RepoCell\";\nimport CommitsGetter from \"../commits/CommitsGetter\";\nimport \"./../../css/RepoRow.css\";\n\nclass RepoRow extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expanded: false,\n      asked: false\n    };\n  }\n\n  static propTypes = {\n    repo: PropTypes.shape({\n      name: PropTypes.string,\n      created_at: PropTypes.string,\n      description: PropTypes.string,\n      language: PropTypes.string,\n      license: PropTypes.object,\n      stargazers_count: PropTypes.number,\n      stargazers_url: PropTypes.string,\n      forks_count: PropTypes.number,\n      forks_url: PropTypes.string,\n      url: PropTypes.string,\n      open_issues_count: PropTypes.number,\n      issues_url: PropTypes.string,\n      commits_url: PropTypes.string\n    })\n  };\n\n  renderChosenAttributes() {\n    // Test runner doesn't make the request\n    if (!this.props.repo) {\n      return undefined;\n    }\n\n    const {\n      html_url,\n      name,\n      description,\n      stargazers_count,\n      forks_count,\n      open_issues_count,\n      open_issues_url\n    } = this.props.repo;\n\n    const chosenAttributes = {\n      name: { label: \"Name\", url: html_url, text: name },\n      description: { label: \"Description\", text: description, expands: true },\n      stargazers_count: { label: \"Stars\", text: stargazers_count },\n      forks_count: { label: \"Forks\", text: forks_count },\n      open_issues_count: {\n        label: \"Issues\",\n        text: open_issues_count,\n        url: open_issues_url\n      }\n    };\n\n    return Object.values(chosenAttributes).map(\n      ({ label, url, text, expands }) => (\n        <RepoCell {...{ key: label, label, url, text, expands }} />\n      )\n    );\n  }\n\n  renderExpandButton() {\n    const { expanded } = this.state;\n    const className = expanded ? \"rotate-90\" : \"\";\n\n    return (\n      <button\n        onClick={() => this.setState({ expanded: !expanded, asked: true })}\n      >\n        <div className={className}>▶</div>\n      </button>\n    );\n  }\n\n  render() {\n    if (!this.props.repo) return null;\n    const { commits_url } = this.props.repo;\n    const { expanded, asked } = this.state;\n    return (\n      <div>\n        <span className=\"repo-row\">\n          {this.renderChosenAttributes()}\n          {this.renderExpandButton()}\n        </span>\n        <div className={expanded ? \"\" : \"repo-row-commit-holder\"}>\n          {commits_url && asked && <CommitsGetter commits_url={commits_url} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RepoRow;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport RepoRow from \"./RepoRow\";\n\nconst RepoTable = ({ repoError, repos, sortBy, sortDirection }) =>\n  repoError || !repos ? (\n    <div>That repo might not exist</div>\n  ) : (\n    <React.Fragment>\n      {repos.length > 0 &&\n        repos\n          .sort((a, b) => (a[sortBy] > b[sortBy] ? -1 : 1) * sortDirection)\n          .map(repo => {\n            return (\n              <div key={repo.name} className=\"repo-list-item\">\n                {<RepoRow repo={repo} />}\n              </div>\n            );\n          })}\n    </React.Fragment>\n  );\n\nRepoTable.propTypes = {\n  repoError: PropTypes.bool,\n  sortDirection: PropTypes.oneOf([undefined, 1, -1]),\n  sortBy: PropTypes.oneOf([\n    \"stargazers_count\",\n    \"forks_count\",\n    \"open_issues_count\"\n  ]),\n  repos: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      created_at: PropTypes.string,\n      description: PropTypes.string,\n      language: PropTypes.string,\n      license: PropTypes.object,\n      stargazers_count: PropTypes.number,\n      stargazers_url: PropTypes.string,\n      forks_count: PropTypes.number,\n      forks_url: PropTypes.string,\n      url: PropTypes.string,\n      open_issues_count: PropTypes.number,\n      issues_url: PropTypes.string\n    })\n  )\n};\n\nexport default RepoTable;\n","import React, { Component } from \"react\";\nimport Select from \"./components/Select\";\nimport SearchOwner from \"./components/SearchOwner\";\nimport SortOrderButton from \"./components/SortOrderButton\";\nimport LayoutBase from \"./components/LayoutBase\";\nimport RepoTable from \"./components/RepoDisplay/RepoTable\";\nimport \"./css/App.css\";\n\nconst apiBase = \"https://api.github.com\";\nconst ownerChoices = [\"orgs\", \"users\"];\nconst sortOptions = [\"stargazers_count\", \"forks_count\", \"open_issues_count\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repos: [],\n      owner: \"hubSpot\",\n      ownerChoices: ownerChoices[0],\n      sortBy: sortOptions[0],\n      sortDirection: undefined,\n      repoError: undefined\n    };\n\n    this.selectOnChange = this.selectOnChange.bind(this);\n    this.selectSortCount = this.selectSortCount.bind(this);\n    this.reverseSort = this.reverseSort.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  newFetch() {\n    const { ownerChoices, owner } = this.state;\n\n    if (owner.length < 2) {\n      this.setState({ repos: [], repoError: true });\n      return null;\n    }\n\n    fetch(`${apiBase}/${ownerChoices}/${owner}/repos`)\n      .then(data => data.json())\n      .then(json => this.setState({ repos: json, repoError: false }))\n      .catch(() => {\n        this.setState({ repoError: true });\n      });\n  }\n\n  componentWillMount() {\n    this.newFetch();\n  }\n\n  handleInputChange(e) {\n    this.setState({ owner: e });\n    this.newFetch();\n  }\n\n  selectOnChange(e) {\n    this.setState({\n      ownerChoices: ownerChoices[e.nativeEvent.srcElement.selectedIndex]\n    });\n    this.newFetch();\n  }\n\n  selectSortCount(e) {\n    this.setState({\n      sortBy: sortOptions[e.nativeEvent.srcElement.selectedIndex]\n    });\n  }\n\n  reverseSort() {\n    const { sortDirection } = this.state;\n    if (sortDirection !== 0 && sortDirection !== 1) {\n      this.setState({ sortDirection: 1 });\n    } else {\n      this.setState({ sortDirection: sortDirection * -1 });\n    }\n  }\n\n  renderSearchControls() {\n    return (\n      <React.Fragment>\n        <SearchOwner onChange={this.handleInputChange} />\n        <Select\n          onChange={this.selectOnChange}\n          name=\"ownerType\"\n          options={ownerChoices}\n        />\n        <Select\n          onChange={this.selectSortCount}\n          name=\"selectSortOption\"\n          options={sortOptions}\n        />\n        <SortOrderButton\n          sortDirection={this.state.sortDirection}\n          onClick={this.reverseSort}\n        />\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const { repos, sortDirection, sortBy } = this.state;\n    return (\n      <LayoutBase header={this.renderSearchControls()}>\n        <RepoTable\n          {...{\n            sortDirection,\n            sortBy,\n            repos\n          }}\n        />\n      </LayoutBase>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}