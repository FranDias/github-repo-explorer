{"version":3,"sources":["components/Select.js","components/SearchOwner.js","components/SortOrderButton.js","components/LayoutBase.js","App.js","serviceWorker.js","index.js"],"names":["Select","_ref","name","onChange","options","react_default","a","createElement","map","choice","key","value","defaultProps","SearchOwner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","debounce","cancel","_this2","placeholder","type","e","nativeEvent","target","Component","SortOrderButton","sortDirection","onClick","arrowDirectionContent","ropTypes","PropTypes","oneOf","undefined","func","isRequired","LayoutBase","header","children","ownerChoices","sortOptions","App","state","repos","owner","sortBy","direction","commits","commitName","repoError","selectOnChange","bind","assertThisInitialized","selectSortCount","reverseSort","fetchCommits","handleInputChange","_this$state","length","setState","fetch","concat","then","data","json","catch","newFetch","srcElement","selectedIndex","commitURL","repoName","_this3","repo","_this4","_this$state2","role","aria-labelledby","stargazers_count","forks_count","open_issues_count","commits_url","split","commit","author","Fragment","components_SearchOwner","components_Select","components_SortOrderButton","_this5","_this$state3","sort","b","className","renderRepoAttributes","components_LayoutBase","renderSearchControls","renderReposList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b107521d.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Select = ({ name, onChange, options }) => (\n  <select {...{ onChange, name }}>\n    {options.map(choice => (\n      <option key={choice} value={choice}>\n        Sort by {choice}\n      </option>\n    ))}\n  </select>\n);\n\nSelect.propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nSelect.defaultProps = {\n  name: \"default\",\n  onChange: () => {},\n  options: [\"no options provied\"]\n};\n\nexport default Select;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport debounce from \"lodash/debounce\";\n\nclass SearchOwner extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = debounce(this.props.onChange, 300);\n  }\n\n  static defaultProps = {\n    placeholder: \"Search an organization's repositories. Now showing HubSpot's\",\n    onChange: () => {}\n  };\n\n  static propTypes = {\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n  };\n\n  componentWillUnmount() {\n    this.onChange.cancel();\n  }\n\n  render() {\n    const { placeholder } = this.props;\n\n    return (\n      <input\n        {...{\n          type: \"text\",\n          placeholder,\n          onChange: e => this.onChange(e.nativeEvent.target.value)\n        }}\n      />\n    );\n  }\n}\n\nexport default SearchOwner;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst arrowDirectionContent = sortDirection => {\n  if (!sortDirection) return \"•\";\n  return sortDirection === \"asc\" ? \"⬆\" : \"⬇\";\n};\n\nconst SortOrderButton = ({ sortDirection, onClick }) => (\n  <button onClick={onClick}>{arrowDirectionContent(sortDirection)}</button>\n);\n\nSortOrderButton.ropTypes = {\n  sortDirection: PropTypes.oneOf([undefined, \"asc\", \"dec\"]),\n  onClick: PropTypes.func.isRequired\n};\n\nSortOrderButton.defaultProps = {\n  sortDirection: undefined\n};\n\nexport default SortOrderButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LayoutBase = ({ header, children }) => {\n  return (\n    <div>\n      {header && <header>{header}</header>}\n      {children && <div>{children}</div>}\n    </div>\n  );\n};\n\nLayoutBase.propTypes = {\n  header: PropTypes.node,\n  children: PropTypes.node\n};\n\nexport default LayoutBase;\n","import React, { Component } from \"react\";\nimport Select from \"./components/Select\";\nimport SearchOwner from \"./components/SearchOwner\";\nimport SortOrderButton from \"./components/SortOrderButton\";\nimport LayoutBase from \"./components/LayoutBase\";\nimport \"./App.css\";\n\nconst apiBase = \"https://api.github.com\";\nconst ownerChoices = [\"orgs\", \"users\"];\nconst sortOptions = [\"stargazers_count\", \"forks_count\", \"open_issues_count\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repos: [],\n      owner: \"hubSpot\",\n      ownerChoices: ownerChoices[0],\n      sortBy: sortOptions[0],\n      direction: 1,\n      commits: [],\n      commitName: \"\",\n      repoError: undefined\n    };\n\n    this.selectOnChange = this.selectOnChange.bind(this);\n    this.selectSortCount = this.selectSortCount.bind(this);\n    this.reverseSort = this.reverseSort.bind(this);\n    this.fetchCommits = this.fetchCommits.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  newFetch() {\n    const { ownerChoices, owner } = this.state;\n\n    if (owner.length < 2) {\n      this.setState({ repos: [], repoError: true });\n      return null;\n    }\n\n    fetch(`${apiBase}/${ownerChoices}/${owner}/repos`)\n      .then(data => data.json())\n      .then(json => this.setState({ repos: json, repoError: false }))\n      .catch(() => {\n        this.setState({ repoError: true });\n      });\n  }\n\n  componentWillMount() {\n    this.newFetch();\n  }\n\n  handleInputChange(e) {\n    this.setState({ owner: e });\n    this.newFetch();\n  }\n\n  selectOnChange(e) {\n    this.setState({\n      ownerChoices: ownerChoices[e.nativeEvent.srcElement.selectedIndex]\n    });\n    this.newFetch();\n  }\n\n  selectSortCount(e) {\n    this.setState({\n      sortBy: sortOptions[e.nativeEvent.srcElement.selectedIndex]\n    });\n  }\n\n  reverseSort() {\n    this.setState({ direction: this.state.direction * -1 });\n  }\n\n  fetchCommits(commitURL, repoName) {\n    fetch(commitURL)\n      .then(data => data.json())\n      .then(json => this.setState({ commits: json, commitName: repoName }));\n  }\n\n  renderRepoAttributes(repo) {\n    const { commits, commitName, repoError } = this.state;\n    if (repoError) {\n      return <span>…looks like we ran into a problem</span>;\n    }\n    return (\n      <span>\n        <span>{repo.name}</span>,\n        <span role=\"img\" aria-labelledby=\"star\">\n          ⭐\n        </span>\n        {repo.stargazers_count},\n        <span role=\"img\" aria-labelledby=\"fork\">\n          🍴\n        </span>\n        {repo.forks_count},\n        <span role=\"img\" aria-labelledby=\"alarm\">\n          🚨\n        </span>\n        {repo.open_issues_count},\n        <button\n          onClick={() =>\n            this.fetchCommits(repo.commits_url.split(\"{\")[0], repo.name)\n          }\n        >\n          <span role=\"img\" aria-labelledby=\"commit\">\n            💍\n          </span>\n          commits\n        </button>\n        {repo.name === commitName &&\n          commits.map(commit => <div>{commit.commit.author.name}</div>)}\n        }\n      </span>\n    );\n  }\n\n  renderSearchControls() {\n    return (\n      <React.Fragment>\n        <SearchOwner onChange={this.handleInputChange} />\n        <Select\n          onChange={this.selectOnChange}\n          name=\"ownerType\"\n          options={ownerChoices}\n        />\n        <Select\n          onChange={this.selectSortCount}\n          name=\"selectSortOption\"\n          options={sortOptions}\n        />\n        <SortOrderButton onClick={this.reverseSort} />\n      </React.Fragment>\n    );\n  }\n\n  renderReposList() {\n    const { direction, repos, sortBy } = this.state;\n    return (\n      <React.Fragment>\n        {repos.length > 0 &&\n          repos\n            .sort((a, b) => (a[sortBy] > b[sortBy] ? -1 : 1) * direction)\n            .map(repo => {\n              return (\n                <div key={repo.name} className=\"repo-list-item\">\n                  {this.renderRepoAttributes(repo)}\n                </div>\n              );\n            })}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <LayoutBase header={this.renderSearchControls()}>\n        {this.renderReposList()}\n      </LayoutBase>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}