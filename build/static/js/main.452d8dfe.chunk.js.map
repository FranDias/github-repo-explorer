{"version":3,"sources":["components/Select.js","App.js","serviceWorker.js","index.js"],"names":["Select","name","this","props","undefined","_this$props","onChange","options","react_default","a","createElement","map","choice","key","value","PureComponent","defaultProps","ownerChoices","sortOptions","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","repos","user","sortBy","direction","commits","commitName","repoError","selectOnChange","bind","assertThisInitialized","selectSortCount","reverseSort","fetchCommits","handleInputChange","debounce","url","_this2","fetch","concat","then","data","json","setState","catch","newFetch","cancel","e","nativeEvent","srcElement","selectedIndex","commitURL","repoName","_this3","repo","_this4","_this$state","role","aria-labelledby","stargazers_count","forks_count","open_issues_count","onClick","commits_url","split","commit","author","_this5","_this$state2","className","type","placeholder","target","components_Select","length","sort","b","renderRepoAttributes","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.452d8dfe.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Select extends PureComponent {\n  static propTypes = {\n    name: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    options: PropTypes.arrayOf(PropTypes.string).isRequired\n  };\n\n  static defaultProps = {\n    onChange: () => {},\n    options: [\"no options provied\"]\n  };\n\n  getname() {\n    const { name } = this.props;\n    return name !== undefined ? name : \"\";\n  }\n\n  render() {\n    const { onChange, name, options } = this.props;\n\n    return (\n      <select {...{ onChange, name }}>\n        {options.map(choice => (\n          <option key={choice} value={choice}>\n            Sort by {choice}\n          </option>\n        ))}\n      </select>\n    );\n  }\n}\n\nexport default Select;\n","import React, { Component } from \"react\";\nimport debounce from \"lodash/debounce\";\nimport Select from \"./components/Select\";\nimport \"./App.css\";\n\nconst apiBase = \"https://api.github.com\";\nconst ownerChoices = [\"orgs\", \"users\"];\nconst sortOptions = [\"stargazers_count\", \"forks_count\", \"open_issues_count\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repos: [],\n      user: \"netflix\",\n      ownerChoices: ownerChoices[0],\n      sortBy: sortOptions[0],\n      direction: 1,\n      commits: [],\n      commitName: \"\",\n      repoError: undefined\n    };\n\n    this.selectOnChange = this.selectOnChange.bind(this);\n    this.selectSortCount = this.selectSortCount.bind(this);\n    this.reverseSort = this.reverseSort.bind(this);\n    this.fetchCommits = this.fetchCommits.bind(this);\n    this.handleInputChange = debounce(this.handleInputChange.bind(this), 300);\n  }\n\n  newFetch(url) {\n    fetch(`${apiBase}/${this.state.ownerChoices}/${this.state.user}/repos`)\n      .then(data => data.json())\n      .then(json => this.setState({ repos: json, repoError: false }))\n      .catch(() => {\n        this.setState({ repoError: true });\n      });\n  }\n\n  componentWillMount() {\n    this.newFetch();\n  }\n\n  componentWillUnmount() {\n    this.handleInputChange.cancel();\n  }\n\n  handleInputChange(e) {\n    this.setState({ user: e });\n    this.newFetch();\n  }\n\n  selectOnChange(e) {\n    this.setState({\n      ownerChoices: ownerChoices[e.nativeEvent.srcElement.selectedIndex]\n    });\n    this.newFetch();\n  }\n\n  selectSortCount(e) {\n    this.setState({\n      sortBy: sortOptions[e.nativeEvent.srcElement.selectedIndex]\n    });\n  }\n\n  reverseSort() {\n    this.setState({ direction: this.state.direction * -1 });\n  }\n\n  fetchCommits(commitURL, repoName) {\n    fetch(commitURL)\n      .then(data => data.json())\n      .then(json => this.setState({ commits: json, commitName: repoName }));\n  }\n\n  renderRepoAttributes(repo) {\n    const { commits, commitName, repoError } = this.state;\n    if (repoError) {\n      return <span>‚Ä¶looks like we ran into a problem</span>;\n    }\n    return (\n      <span>\n        <span>{repo.name}</span>,\n        <span role=\"img\" aria-labelledby=\"star\">\n          ‚≠ê\n        </span>\n        {repo.stargazers_count},\n        <span role=\"img\" aria-labelledby=\"fork\">\n          üç¥\n        </span>\n        {repo.forks_count},\n        <span role=\"img\" aria-labelledby=\"alarm\">\n          üö®\n        </span>\n        {repo.open_issues_count},\n        <button\n          onClick={() =>\n            this.fetchCommits(repo.commits_url.split(\"{\")[0], repo.name)\n          }\n        >\n          <span role=\"img\" aria-labelledby=\"commit\">\n            üíç\n          </span>\n          commits\n        </button>\n        {repo.name === commitName &&\n          commits.map(commit => <div>{commit.commit.author.name}</div>)}\n        }\n      </span>\n    );\n  }\n\n  render() {\n    const { direction, repos, sortBy } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Search an organization's repositories\"\n              onChange={e => this.handleInputChange(e.nativeEvent.target.value)}\n            />\n            <Select\n              onChange={this.selectOnChange}\n              name=\"ownerType\"\n              options={ownerChoices}\n            />\n            <Select\n              onChange={this.selectSortCount}\n              name=\"selectSortOption\"\n              options={sortOptions}\n            />\n            <button onClick={this.reverseSort}>reverse sort</button>\n          </div>\n          <div>\n            {repos.length > 0 &&\n              repos\n                .sort((a, b) => (a[sortBy] > b[sortBy] ? -1 : 1) * direction)\n                .map(repo => {\n                  return (\n                    <div key={repo.name} className=\"repo-list-item\">\n                      {this.renderRepoAttributes(repo)}\n                    </div>\n                  );\n                })}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}